import Product from '../models/Product.js';

// @desc    Fetch all active products
// @route   GET /api/products
// @access  Public
const getProducts = async (req, res) => {
  try {
    const products = await Product.find({ status: 'active' });
    res.json(products);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Fetch a single product by ID
// @route   GET /api/products/:id
// @access  Public
const getProductById = async (req, res) => {
  try {
    const product = await Product.findOne({ id: req.params.id });
    if (product) {
      res.json(product);
    } else {
      res.status(404).json({ message: 'Product not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Create a new product
// @route   POST /api/products
// @access  Private/Admin
const createProduct = async (req, res) => {
  const { name, description, price, imageUrls, category, stock } = req.body;

  // Basic validation
  if (!name || !price || !category) {
    return res.status(400).json({ message: 'Name, price, and category are required' });
  }

  try {
    const newProduct = new Product({
      // id will be generated by Mongoose based on schema definition
      name,
      description,
      price,
      imageUrls,
      category,
      stock,
    });

    const createdProduct = await newProduct.save();
    res.status(201).json(createdProduct);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// @desc    Update an existing product
// @route   PUT /api/products/:id
// @access  Private/Admin
const updateProduct = async (req, res) => {
  const { name, description, price, imageUrls, category, stock, status } = req.body;

  try {
    const product = await Product.findOne({ id: req.params.id });

    if (product) {
      product.name = name || product.name;
      product.description = description || product.description;
      product.price = price || product.price;
      product.imageUrls = imageUrls || product.imageUrls;
      product.category = category || product.category;
      product.stock = stock !== undefined ? stock : product.stock;
      product.status = status || product.status;

      const updatedProduct = await product.save();
      res.json(updatedProduct);
    } else {
      res.status(404).json({ message: 'Product not found' });
    }
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// @desc    Soft delete a product (set status to 'deleted')
// @route   DELETE /api/products/:id
// @access  Private/Admin
const deleteProduct = async (req, res) => {
  try {
    const product = await Product.findOne({ id: req.params.id });

    if (product) {
      product.status = 'deleted';
      await product.save();
      res.json({ message: 'Product soft deleted' });
    } else {
      res.status(404).json({ message: 'Product not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// @desc    Restore a deleted product (set status to 'active')
// @route   PUT /api/products/:id/restore
// @access  Private/Admin
const restoreProduct = async (req, res) => {
  try {
    const product = await Product.findOne({ id: req.params.id });

    if (product) {
      product.status = 'active';
      await product.save();
      res.json({ message: 'Product restored' });
    } else {
      res.status(404).json({ message: 'Product not found' });
    }
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};


// @desc    Permanently delete a product
// @route   DELETE /api/products/:id/permanent
// @access  Private/Admin
const permanentlyDeleteProduct = async (req, res) => {
    try {
      const result = await Product.deleteOne({ id: req.params.id });

      if (result.deletedCount > 0) {
        res.json({ message: 'Product permanently deleted' });
      } else {
        res.status(404).json({ message: 'Product not found' });
      }
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  };


export {
  getProducts,
  getProductById,
  createProduct,
  updateProduct,
  deleteProduct,
  restoreProduct,
  permanentlyDeleteProduct,
};